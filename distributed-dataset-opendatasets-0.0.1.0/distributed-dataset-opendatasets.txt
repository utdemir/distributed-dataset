-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ready to use open datasets for distribute-dataset
--   
--   Ready to use open datasets for distribute-dataset
@package distributed-dataset-opendatasets
@version 0.0.1.0

module Control.Distributed.Dataset.OpenDatasets.GHArchive
ghArchive :: (Day, Day) -> Dataset GHEvent
data GHEvent
GHEvent :: GHActor -> GHRepo -> GHEventType -> GHEvent
[_gheActor] :: GHEvent -> GHActor
[_gheRepo] :: GHEvent -> GHRepo
[_gheType] :: GHEvent -> GHEventType
data GHEventType
GHPushEvent :: GHPushEventPayload -> GHEventType
GHOtherEvent :: Text -> GHEventType
newtype GHPushEventPayload
GHPushEventPayload :: [GHCommit] -> GHPushEventPayload
[_ghpepCommits] :: GHPushEventPayload -> [GHCommit]
data GHCommit
GHCommit :: GHCommitAuthor -> Text -> Text -> Bool -> GHCommit
[_ghcAuthor] :: GHCommit -> GHCommitAuthor
[_ghcMessage] :: GHCommit -> Text
[_ghcSha] :: GHCommit -> Text
[_ghcDistinct] :: GHCommit -> Bool
data GHCommitAuthor
GHCommitAuthor :: Text -> Text -> GHCommitAuthor
[_ghcaEmail] :: GHCommitAuthor -> Text
[_ghcaName] :: GHCommitAuthor -> Text
data GHActor
GHActor :: Maybe Integer -> Maybe Text -> Text -> GHActor
[_ghaId] :: GHActor -> Maybe Integer
[_ghaLogin] :: GHActor -> Maybe Text
[_ghaUrl] :: GHActor -> Text
data GHRepo
GHRepo :: Integer -> Text -> GHRepo
[_ghrId] :: GHRepo -> Integer
[_ghrName] :: GHRepo -> Text
gheType :: Lens' GHEvent GHEventType
gheRepo :: Lens' GHEvent GHRepo
gheActor :: Lens' GHEvent GHActor
_GHOtherEvent :: Prism' GHEventType Text
_GHPushEvent :: Prism' GHEventType GHPushEventPayload
ghpepCommits :: Iso' GHPushEventPayload [GHCommit]
ghcSha :: Lens' GHCommit Text
ghcMessage :: Lens' GHCommit Text
ghcDistinct :: Lens' GHCommit Bool
ghcAuthor :: Lens' GHCommit GHCommitAuthor
ghcaName :: Lens' GHCommitAuthor Text
ghcaEmail :: Lens' GHCommitAuthor Text
ghaUrl :: Lens' GHActor Text
ghaLogin :: Lens' GHActor (Maybe Text)
ghaId :: Lens' GHActor (Maybe Integer)
ghrName :: Lens' GHRepo Text
ghrId :: Lens' GHRepo Integer

-- | Convert from proleptic Gregorian calendar. First argument is year,
--   second month number (1-12), third day (1-31). Invalid values will be
--   clipped to the correct range, month first, then day.
fromGregorian :: Integer -> Int -> Int -> Day
instance GHC.Show.Show e => GHC.Show.Show (Control.Distributed.Dataset.OpenDatasets.GHArchive.GHArchiveException e)
instance (Data.Typeable.Internal.Typeable e, GHC.Show.Show e) => GHC.Exception.Type.Exception (Control.Distributed.Dataset.OpenDatasets.GHArchive.GHArchiveException e)
