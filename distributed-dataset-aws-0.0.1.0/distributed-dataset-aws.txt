-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | AWS backends for distributed-dataset.
--   
--   AWS backends for distributed-dataset.
@package distributed-dataset-aws
@version 0.0.1.0

module Control.Distributed.Fork.AWS

-- | Provides a <a>Backend</a> using AWS Lambda functions.
withLambdaBackend :: LambdaBackendOptions -> (Backend -> IO a) -> IO a

-- | Options required for creating a Lambda backend.
data LambdaBackendOptions
lambdaBackendOptions :: Text -> LambdaBackendOptions

-- | Prefix to the deployment archive and the CloudFormation stack.
lboPrefix :: Lens' LambdaBackendOptions Text

-- | Desired memory for the Lambda functions.
lboMemory :: Lens' LambdaBackendOptions Int

-- | Maximum number of concurrent "invoke" calls to AWS API to trigger
--   executions.
lboMaxConcurrentInvocations :: Lens' LambdaBackendOptions Int

-- | Maximum number of concurrently executing Lambda functions.
lboMaxConcurrentExecutions :: Lens' LambdaBackendOptions Int

-- | If the size of the return value from your function is larger than 200
--   kilobytes, we fetch the results via S3. This parameter sets the
--   maximum number of concurrent downloads from S3.
lboMaxConcurrentDownloads :: Lens' LambdaBackendOptions Int

-- | Whether to keep the CloudFormation stack after the
--   <a>withLambdaBackend</a> call. Useful for debugging.
lboKeepStack :: Lens' LambdaBackendOptions Bool

module Control.Distributed.Dataset.AWS

-- | A shuffle store which uses given S3 bucket and the prefix as a shuffle
--   store.
s3ShuffleStore :: Text -> Text -> ShuffleStore
instance (Control.Monad.Fail.MonadFail m, Control.Monad.IO.Class.MonadIO m) => Control.Monad.Fail.MonadFail (Control.Monad.Trans.AWS.AWST m)
